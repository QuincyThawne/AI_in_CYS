Exp No
: 4                                                                                                                                                 Date:                                                                                         
 
IMPLEMENT A PROGRAM FOR NETWORK ACCESS CONTROL  
TO ILLUSTRATE MALWARE ATTACKS  
 
 
       Aim: To Implement a program for network access control to illustrate malware attacks  
 
       Algorithm:  
        
1.Initialize VirusTotal API:  
• Set your VirusTotal API key and the base URL for IP address reports.  
2.Define check_malicious_ip function:  
• Input: IP address  
• Action: Sends an API request to VirusTotal to check the IP.  
• Output: If the IP is found, check the number of detected malicious URLs associated with it.  
• If positive detections > 0, print an alert.  
• Else, print that the IP is clean or not found in the database.  
3. Define packet_handler function:  
• Input: Network packet  
• Action:  
• Check if the packet has an IP layer.  
• Extract source and destination IPs.  
• Call check_malicious_ip for both IPs to verify if they’re flagged as malicious.  
4. Define start_sniffing function:  
• Input: Network interface (default: Wi -Fi) 
• Action: Use scapy to sniff network packets on the specified interface, sending each packet to packet_handler.  
5. Main Execution:  
• Call start_sniffing to begin real -time monitoring on the specified network interface.  
       Program  
from scapy.all import sniff, IP  
import requests  
 
# Your VirusTotal API key  
API_KEY = '2399d639231bd6ff55ffd4282ee47b57f5e55d53e89342faa66e51504f480574'  
 
# VirusTotal API base URL for IP address reports  
VT_URL = "https://www.virustotal.com/vtapi/v2/ip -address/report"  
 
# Function to check if an IP address is malicious using VirusTotal  
def check_malicious_ip(ip):  
    params = {'apikey': API_KEY, 'ip': ip}  
    try: 
        # Send request to VirusTotal API  
        response = requests.get(VT_URL, params=params)  
        result = response.json()  
 22 
         if result.get('response_code') == 1:  # IP found in VirusTotal  
            positives = len(result.get('detected_urls', []))  # List of detected malicious URLs for this IP  
            if positives > 0:  
 
                print(f"[ALERT] VirusTotal  flagged this IP as malicious: {ip} ({positives} detected malicious 
URLs)")  
            else: 
                print(f"[INFO] IP is clean: {ip}")  
        else: 
            print(f"[INFO] IP not found in VirusTotal database: {ip}")  
    except Exception as e:  
        print(f"Error checking IP with VirusTotal: {e}")  
 
# Function to handle each packet captured  
def packet_handler(packet):  
    if packet.haslayer(IP):  # Check if the packet has an IP layer  
        src_ip = packet[IP].src  
        dst_ip = packet[IP].dst  
        print(f"[INFO] Source IP: {src_ip}, Destination IP: {dst_ip}")  
 
        # Check if the source and destination IPs are malicious  
        check_malicious_ip(src_ip)  
        check_malicious_ip(dst_ip)  
 
# Start sniffing packets  
def start_sniffing(interface="Wi -Fi"): 
    print(f"[*] Starting IP monitoring on {interface}...")  
    sniff(iface=interface, prn=packet_handler, store=False)  
 
if __name__ == "__main__":  
    start_sniffing(interface="Wi -Fi") 
 
       Outp ut 
              
 
 
       Result:  
          
 
            
23