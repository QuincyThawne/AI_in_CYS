Exp No
: 9                                                                                                                                      Date:                                                                                         
 
EXPLORE IMAGE BASED RECOGNITION USING SOFTWARE POWERED AI  
 
 
         Aim:  To explore Image Based Recognition using Software powered AI.  
 
         Algorithm:  
1. Import Libraries: Imports necessary libraries including TensorFlow and Matplotlib.  
2. Load the Dataset: Loads the CIFAR -10 dataset, which is included in TensorFlow.  
3. Preprocess the Data: Normalizes the image data to the range [0, 1].  
4. Build the CNN Model: Defines a simple CNN architecture with convolutional, pooling, flattening, and dense 
layers.  
5. Compile the Model: Compiles the model with the Adam optimizer and Sparse Categorical Crossentropy loss 
function.  
6. Train the Model: Fits the model to the training data over 10 epochs, using a validation set from the test data.  
7. Evaluate the Model: Evaluates the model's accuracy on the test data.  
8. Make Predictions: Uses the trained model to make predictions on the test data.  
9. Visualize Predictions: Plots the first 15 images from the test set along with their predicted and true labels.  
 
Program  
import tensorflow as tf  
from tensorflow.keras import datasets, layers, models  
import matplotlib.pyplot as plt  
 
# Load the CIFAR -10 dataset  
(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()  
 
# Normalize pixel values to be between 0 and 1  
train_images = train_images / 255.0  
test_images = test_images / 255.0  
 
# Define the class names in CIFAR -10 
class_names = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']  
 
# Build the CNN model  
model = models.Sequential([  
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),  
    layers.MaxPooling2D((2, 2)),  
    layers.Conv2D(64, (3, 3), activation='relu'),  
    layers.MaxPooling2D((2, 2)),  
    layers.Conv2D(64, (3, 3), activation='relu'),  
    layers.Flatten(),  
    layers.Dense(64, activation='relu'),  
    layers.Dense(10)  
]) 
 
# Compile the model  34 
 model.compile(optimizer='adam',  
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),  
              metrics=['accuracy'])  
 
# Train the model  
model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))  
 
# Evaluate the model  
test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)  
print(' \nTest accuracy:', test_acc)  
 
# Make predictions  
predictions = model.predict(test_images)  
 
# Visualize some predictions  
def plot_image(i, predictions_array, true_label, img):  
    predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]  
    plt.grid(False)  
    plt.xticks([])  
    plt.yticks([])  
 
    plt.imshow(img)  
    predicted_label = class_names[np.argmax(predictions_array)]  
    true_label = class_names[true_label[0]]  
    color = 'blue' if predicted_label == true_label else 'red'  
    plt.xlabel(f'{predicted_label} ({true_label})', color=color)  
# Plot the first 15 images, their predicted labels, and the true labels  
plt.figure(figsize=(15, 5))  
for i in range(15):  
    plt.subplot(3, 5, i + 1)  
    plot_image(i, predictions, test_labels, test_images)  
plt.show()  
 
           Output:  
 
35 
  
 
 
 
 
 
 
 
 
 
 
 
 
     
 
 
 
 
 
 
 
 
           Result:  
 
 
           
 
36