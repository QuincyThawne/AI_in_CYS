Exp No
: 12                                                                                                                                          Date:                                                                                         
 
CREATE A FAKE NEWS TRACKER PROGRAM TO COLLECT, DETECT AND HELP 
VISUALIZE FAKE NEWS DATA  
 
   Aim: To create a fake news tracker program to collect, detect and help visualize fake news  data  
 
Algorithm:  
1. Load the Dataset: Reads the CSV file and loads it into a Pandas DataFrame.  
2. Data Preprocessing:  
• Drops any rows with missing values.  
• Converts text to lowercase to standardize the input.  
3. Split the Dataset: Splits data into training and test sets.  
4. Text Vectorization: Uses TfidfVectorizer to convert the text data into numerical features.  
5. Train the Model: Trains a logistic regression model on the TF -IDF features.  
6. Make Predictions: Predicts labels on the test data.  
7. Evaluate the Model: Calculates accuracy, confusion matrix, and classification report.  
 
Program  
# Import necessary libraries  
import pandas as pd  
from sklearn.model_selection import train_test_split  
from sklearn.feature_extraction.text import TfidfVectorizer  
from sklearn.linear_model import LogisticRegression  
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report  
 
# Step 1: Load the dataset  
data = pd.read_csv('C:/Users/dhari/OneDrive/Desktop/AI IN CS/WELFake_Dataset.csv')  
 
# Step 2: Preprocess the data  
# Drop any null rows  
data = data.dropna()  
 
# Converting text to lowercase for consistency  
data['text'] = data['text'].str.lower()  
 
# Step 3: Split the dataset into training and testing sets  
X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=42)  
 
# Step 4: Vectorize the text data using TF -IDF 
vectorizer = TfidfVectorizer(max_df=0.7, stop_words='english')  
X_train_tfidf = vectorizer.fit_transform(X_train)  
X_test_tfidf = vectorizer.transform(X_test)  
 
# Step 5: Train a logistic regression model  
model = LogisticRegression()  47 
 model.fit(X_train_tfidf, y_train)  
 
# Step 6: Make predictions on the test set  
y_pred = model.predict(X_test_tfidf)  
 
# Step 7: Evaluate the model  
accuracy = accuracy_score(y_test, y_pred)  
conf_matrix = confusion_matrix(y_test, y_pred)  
class_report = classification_report(y_test, y_pred)  
 
 
print("Accuracy:", accuracy)  
print("Confusion Matrix: \n", conf_matrix)  
print("Classification Report: \n", class_report)  
 
Output:  
 
 
 
 
 
 
 
 
 
 
 
              Result: